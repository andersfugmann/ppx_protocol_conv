=== msgpack.SingleElem ===
[]
=== msgpack.SingleElem ===
[2]
=== msgpack.Longarray ===
[4, 2, 3, 1]
=== msgpack.EmptyInsideRec ===
{c: c, V: [], a: a}
=== msgpack.SingleInsideRec ===
{c: c, V: [2], a: a}
=== msgpack.MultiInsideRec ===
{c: c, V: [4, 2, 3, 1], a: a}
=== msgpack.ArrayOfArrays ===
{a: [[2, 3], [4, 5]]}
=== msgpack.ArrayOfArrays2 ===
[[], [[], [2], [3, 4]], [[]], [[2]]]
=== msgpack.Tuple ===
[[10, [20, 30, 40], [s50, s60, s70], [[100, 200], [300, 400], [500, 600]]],
 [11, [21, 31, 41], [s51, s61, s71], [[101, 201], [301, 401], [501, 601]]],
 [12, [22, 32, 42], [s52, s62, s72], [[102, 202], [302, 402], [502, 602]]],
 [13, [23, 33, 43], [s53, s63, s73], [[103, 203], [303, 403], [503, 603]]]]
=== msgpack.Any ===
{u: {ua: 7}, v: [B, [5, 6, 7], [10, 11, 12]], z: 101, record:
 {y: string, x: 5}, varray:
 [[B, [5, 6, 7], [10, 11, 12]], [B, [5, 6, 7], [10, 11, 12]],
  [B, [5, 6, 7], [10, 11, 12]]], vlist:
 [[B, [5, 6, 7], [10, 11, 12]], [B, [5, 6, 7], [10, 11, 12]],
  [B, [5, 6, 7], [10, 11, 12]]], tuple: [5, protocol, false], intref: 4,
 intoption: 100, intlist: [3, 4, 5], bytes: "bytes", string2: 1, string:
 string, float: 3.14, nativeint: 20, int64: 10L, int32: 5l, int: 2, char: x,
 bool: true}
=== msgpack.Record ===
{t_il: [1000, 1001, 1002], t_tl:
 [[100, 101, [s100, s101]], [110, 111, [s110, s111]],
  [120, 121, [s120, s121]], [130, 131, [s130, s131]],
  [140, 141, [s140, s141]]], t_t: [100, 101, [s100, s101]], t_i: 1000, t_bl:
 [], t_b:
 {b_al:
  [{a_string: s7, a_int: 7}, {a_string: s8, a_int: 8},
   {a_string: s9, a_int: 9}], b_a: {a_string: s6, a_int: 6}, b_string: s5,
  b_int: 5}, t_al:
 [{a_string: s2, a_int: 2}, {a_string: s3, a_int: 3},
  {a_string: s4, a_int: 4}], t_a: {a_string: s1, a_int: 1}}
=== msgpack.list ===
{a: [1, 2, 3]}
=== msgpack.Lists ===
{l:
 [[A, [1, 2, 3]], [B, [[1, 2], [3, 4, 5], [2]], [3, 1], 5],
  [C, [1, 2, 3], [3, 4, 5]]], c: [100, 101, 102, 103], b:
 [[8, 9], [10, 20, 30, 40]], a: [[1, 2, 3], [], [10, 20, 30, 40], [100, 101]]}
=== msgpack.array ===
{a: [1, 2, 3]}
=== msgpack.EmptyList ===
[]
=== msgpack.SingleElem ===
[2]
=== msgpack.Longlist ===
[4, 3, 2, 1]
=== msgpack.EmptyInsideRec ===
{c: c, V: [], a: a}
=== msgpack.SingleInsideRec ===
{c: c, V: [2], a: a}
=== msgpack.MultiInsideRec ===
{c: c, V: [4, 2, 3, 1], a: a}
=== msgpack.ListOfLists ===
{a: [[2, 3], [4, 5]]}
=== msgpack.ListOfLists2 ===
[[], [[], [2], [3, 4]], [[]], [[2]]]
=== msgpack.Nonrec ===
[A, [Cons, 4, [Cons, 3, Nil]]]
=== msgpack.Nonrec2 ===
[Cons, 4, [Cons, 3, Nil]]
=== msgpack.None ===
()
=== msgpack.Some None ===
{__option: ()}
=== msgpack.Some Some None ===
{__option: {__option: ()}}
=== msgpack.Some Some Some Unit ===
{__option: {__option: {__option: {__option: ()}}}}
=== msgpack.simple ===
5
=== msgpack.record ===
{a: 5}
=== msgpack.multiple ===
[5, 5, true]
=== msgpack.reference ===
{a: {a: 5}}
=== msgpack.recursive ===
{c: {b: {a: 5}}}
=== msgpack.Simple ===
[A, [B, 5], [C, [6, 7]], [D, [8, 9]]]
=== msgpack.Tree ===
[Node, [[Node, [Leaf, 3, Leaf]], 10, Leaf]]
=== msgpack.MutualRecursion ===
[T1, [V, [T, [V, [V1, [V1, [V1, [V0, 5]]]]]]]]
=== msgpack.InsideRec ===
{c: c, V: A, a: a}
=== msgpack.RecordList ===
{objects: [{key: 1}, {key: 2}]}
=== msgpack.SimpleRecord ===
{HostId: SDsd, RequestId: sdfsd, Endpoint: (), Bucket: (), Message: Message,
 Code: Error}
=== msgpack.Test_sig ===
{x: [A, [[A, 7], 7, 7, [B, 0.7], 7]]}
=== msgpack.Test_sig2 ===
[1, 2., 3.0, (), [A, 1], {c: 3.0, b: 2., a: 1}, [A, 1]]
=== msgpack.S3 ===
{Contents: [{ETag: Etag, StorageClass: STANDARD}], Prefix: prefix}
=== msgpack.Types ===
{baz:
 {y_yd: [Variant_two1, 1], y_yc: [three, [100, 200, 300]], y_b:
  [two, [10, 20, 30]], y_a: 2}, bar: true, foo: 1}
=== msgpack.Some Some Some true ===
true
=== msgpack.Some Some None ===
{__option: {__option: ()}}
=== msgpack.Some None ===
{__option: ()}
=== msgpack.None ===
()
=== msgpack.Some Some Some true ===
{a: true}
=== msgpack.Some Some None ===
{a: {__option: {__option: ()}}}
=== msgpack.Some None ===
{a: {__option: ()}}
=== msgpack.None ===
{a: ()}
=== msgpack.unit option option list option option ===
[{__option: {__option: ()}}, {__option: ()}, ()]
=== msgpack.confuse deserialization by using reserved word ===
{o: {option: true}}
=== msgpack.Simple ===
[A, [B, 5], [C, 6, 7], [D, [8, 9]]]
=== msgpack.Tuple ===
[A, [3, 4]]
=== msgpack.Tree ===
[Node, [Node, Leaf, 3, Leaf], 10, Leaf]
=== msgpack.MutualRecursion ===
[T1, [V, [T, [V, [V1, [V1, [V1, [V0, 5]]]]]]]]
=== msgpack.InsideRec ===
{c: c, V: A, a: a}
=== msgpack.InlineRecord ===
[A, {a: a}]
=== msgpack.InlineRecord2 ===
[aa, {b: [aa, {b: [B, 5], A: a}], A: a}]
=== msgpack.Poly ===
[aaa, 5]
=== msgpack.Option.Ok ===
[Ok, 2]
=== msgpack.Option.Error ===
[Error, Error string]
